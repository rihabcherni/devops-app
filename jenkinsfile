pipeline { 
    agent any

    environment {
        SHARED_VOLUME = "C:\\Nouvarch\\shared_volume" 
        REPORT_DIR = 'reports' // RÃ©pertoire des rapports
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    echo 'Setting up the environment...'
                }
            } 
        }
        stage('Build Docker Images') {
            steps {
                echo 'Building Docker Images...'
                bat 'docker-compose -f docker-compose.yml build'
            }
        }
        stage('Install Dependencies') {
            steps {
                echo 'Installing Python dependencies from requirements.txt...'
                bat """
                    docker run --rm -v %WORKSPACE%\\svm_service:/app devops-app/svm-service:latest ^
                        pip install -r /app/requirements.txt
                """
                echo 'Installing Python dependencies from requirements.txt...'
                bat """
                    docker run --rm -v %WORKSPACE%\\vgg19_service:/app devops-app/vgg19-service:latest ^
                        pip install -r /app/requirements.txt
                """
            }
        }
        stage('Run Tests') {
            steps {
                echo 'Running unit tests for SVM Service...'
                bat """
                    docker run --rm -v %WORKSPACE%\\svm_service:/app -v %WORKSPACE%\\reports:/reports devops-app/svm-service:latest ^ 
                        python -m xmlrunner discover -s /app/tests -p "SVM_service/tests/test_svm.py" --output-file /reports/svm_test_results.xml
                """
                echo 'Running unit tests for VGG19 Service...'
                bat """
                    docker run --rm -v %WORKSPACE%\\vgg19_service:/app -v %WORKSPACE%\\reports:/reports devops-app/vgg19-service:latest ^ 
                        python -m xmlrunner discover -s /app/tests -p "VGG19_service/tests/test_vgg.py" --output-file /reports/vgg19_test_results.xml
                """
            }
        }
        stage('Start Services') {
            steps {
                echo 'Starting all services...'
                bat 'docker-compose -f docker-compose.yml up -d'
            }
        }
        stage('Publish Test Results') {
            steps {
                script {
                    echo 'Publishing test results...'
                    junit 'reports/*.xml' // Publication des fichiers de test XML
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            bat 'docker-compose -f docker-compose.yml down'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs.'
        }
    }
}
